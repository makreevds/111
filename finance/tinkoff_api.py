import pandas as pd
from tinkoff.invest import Client
from tinkoff.invest.schemas import InstrumentIdType

TOKEN_TINKOF = 't.GvIEAt49s7Jg6vmgqXaFvhKTK7DUwbpJiK1dsC4ZjjK_PXacw2Q0MAjTNHtMRnVFqAeeHBCb0Xm_JFtj_TtiAA'


def format_money_value(value, precision=2):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç MoneyValue –∏–ª–∏ Quotation –≤ —É–¥–æ–±–Ω—ã–π –≤–∏–¥."""
    return round(value.units + value.nano / 1e9, precision)


def get_instrument_info(client, figi, instrument_type):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–∏–∫–µ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ FIGI –∏ –µ–≥–æ —Ç–∏–ø—É."""
    try:
        instrument_methods = {
            "share": client.instruments.share_by,
            "currency": client.instruments.currency_by,
            "etf": client.instruments.etf_by,
            "bond": client.instruments.bond_by,
            "future": client.instruments.future_by,
            "option": client.instruments.option_by,
            "options": client.instruments.options_by,
        }
        
        if instrument_type in instrument_methods:
            instrument = instrument_methods[instrument_type](id_type=InstrumentIdType.INSTRUMENT_ID_TYPE_FIGI, id=figi).instrument
            return instrument.name, instrument.ticker
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", "N/A"

    except Exception:
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", "N/A"


with Client(TOKEN_TINKOF) as client:
    r = client.users.get_accounts()

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å: –∏–º—è —Å—á–µ—Ç–∞ -> ID
    accounts_dict = {account.name: account.id for account in r.accounts}

    total_portfolio_value = 0  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π

    for name, account_id in accounts_dict.items():
        portfolio = client.operations.get_portfolio(account_id=account_id)

        total_value = format_money_value(portfolio.total_amount_portfolio)
        expected_yield = format_money_value(portfolio.expected_yield)

        print(f"üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å: {name} ({account_id})")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value} rub")
        print(f"üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {expected_yield} ‚ÇΩ\n")

        portfolio_data = []

        for position in portfolio.positions:
            asset_name, ticker = get_instrument_info(client, position.figi, position.instrument_type)
            quantity = format_money_value(position.quantity)
            avg_price = format_money_value(position.average_position_price)  # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
            current_price = format_money_value(position.current_price)  # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            yield_rub = format_money_value(position.expected_yield)  # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Ö
            total_value_asset = round(quantity * current_price, 2)  # –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞

            # –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ %
            if total_value_asset - yield_rub != 0:
                yield_percent = round((yield_rub / (total_value_asset - yield_rub)) * 100, 2)
            else:
                yield_percent = 0  # –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –Ω—É–ª–µ–≤–∞—è, —Ç–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ % —Ä–∞–≤–Ω–∞ 0

            portfolio_data.append([asset_name, ticker, quantity, avg_price, current_price, total_value_asset, yield_rub, yield_percent])

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ %
        df = pd.DataFrame(portfolio_data, columns=["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–∫–µ—Ä", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)", "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (‚ÇΩ)", "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)"])
        df = df.sort_values(by="–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)", ascending=False)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤ %

        print(df)
        print("=" * 50)

        total_portfolio_value += total_value  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∫ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    # –í—ã–≤–æ–¥ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    print(f"üíº –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π: {total_portfolio_value} rub")
